{"name":"Weatherdata","tagline":"A simple R package that fetches Weather data from websites","body":"`weatherData` is a collection of functions that will fetch weather (Temperature, Pressure, Humidity etc.) data from the Web for you as clean data frame.\r\n\r\nIf you want to perform weather Analysis, but don't wish to be bothered with\r\nscraping the data yourself, you can consider using `weatherData`.\r\n\r\n### Shiny App that uses WeatherData\r\n\r\n`WeatherCompare` is [a Shiny App](http://spark.rstudio.com/ram/WeatherCompare/) that uses the data brought over by weatherData and then summarized in various ways\r\n\r\n##Two Installation Options\r\n\r\nYou can install the version from CRAN, or you can try out the version hosted in Github. Github has the development version, where I am trying out the newer functions.\r\n\r\n### Option 1: Install from CRAN\r\n\r\nInstall and Load the library\r\n```\r\ninstall.packages('weatherData')\r\nlibrary(weatherData)\r\n```\r\n\r\n### Option 2: Install from Github\r\n\r\nThe latest version of weatherData is on Github. (Note that this is the development version, and is usually ahead of what's on CRAN.) To install the development version of weatherData from github, use the **`devtools`** package.\r\n\r\n```\r\ninstall.packages(\"devtools\")\r\nlibrary(\"devtools\")\r\ninstall_github(\"weatherData\", \"Ram-N\")\r\n```\r\n\r\nOnce the package has installed, load the library\r\n```\r\nlibrary(weatherData)\r\n```\r\nNote: Windows users must also first install\r\n[Rtools](http://cran.rstudio.com/bin/windows/Rtools/).\r\n\r\n\r\n# How to Use this package\r\n\r\nThe typical workflow when using `weatherData` is to first find the `station_id` for the location(s) that you are interested in. Once you have the station_id and the date ranges, it is a simple matter to fetch the data.\r\n\r\nIn all the examples that follow, it is assumed that you have loaded the library.\r\n```\r\nlibrary(weatherData)\r\n```\r\n\r\n## Examples \r\n\r\nLet's say that we want to search for weather in Buffalo. But we are interested in Buffalo, WY, not Buffalo,NY.\r\n\r\n```\r\ngetStationCode(\"Buffalo\")\r\ngetStationCode(\"Buffalo\", region=\"WY\") #being more specific about the location of interest\r\n```\r\n\r\nThis function will return a record containing matches to a given station name, and the 4 letter code can then be used in the arguments to other functions such as `getWeatherForDate()`\r\nSo, we can see that the 4-letter airportCode that we are interested is `KBYG`\r\n\r\n\r\n### Check if Data is Available\r\n\r\nIn general, it is a good idea to first check if data is available for our location and dates of interest. Throughout the package, we make a distinction between a **Date** and a **Date Range**\r\n\r\n```\r\ncheckDataAvailability(\"KBYG\", \"2011-01-02\") #checking for a single date\r\ncheckDataAvailabilityForDateRange(\"SFO\", \"2010-10-29\", \"2013-01-12\") #checking for a date range\r\n```\r\nThe first command searches for Data Availability (in Weather Underground) for the date specified.\r\nThe second command above will see if weather data is available for the Airport supplied (\"SFO\") for the two end dates supplied: for the 20th Oct 2010 and for Jan 12th 2013 in this case.\r\n\r\nThese commands are useful for a quick check, before invoking `getDateRangeWeather`\r\n\r\n```\r\ngetCurrentTemperature(\"PIT\")\r\n```\r\n\r\nIf you are writing functions that use the current (latest) temperature for any location, you could use the\r\n`getCurrentTemperature` function. This function will get the latest recorded Temperature for a give city or station. Any valid US Airport code or International 4-letter Airport Weather Code is valid. For example \"EGLL\" for London, UK. This function returns a NULL if it is unable to fetch the temperature, so you can test for that using `is.null()`\r\n\r\nNote: This function uses the Sys.Date to learn today's date\r\n\r\n### Built-in DataSets\r\n\r\n```\r\ndata(London2013)\r\n```\r\nThis is a data frame of Ambient temperature data, extracted\r\nfrom Weather Undergound. Each row has two entries (columns). The Timestamp (YYYY-MM-DD HH:MM:SS) and the\r\nTemperatureF (in degrees F) \r\n\r\n\r\n### Suggestions\r\n\r\nSuggestions are welcome! If you would have a particular need for weather data,\r\nlet me know what changes you'd like to see in the package. If you find bugs, please do report it. Fetching data from the web can be fragile. Please consider submitting an Issue.\r\n\r\n### Credits\r\nA number of people have helped with suggestions and pointers.\r\n* Luca Foschini & Alessio Signorini\r\n* Felipe Carillo\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}